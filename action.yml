name: 'ape-github-action'
author: 'ApeWorX Ltd.'
description: 'Run an ape command'
branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  python-version:
    description: 'Override version of python used to run ape - default 3.11'
    required: False
    default: '3.11'
  ape-version-pin:
    description: 'Override version of eth-ape, can also use a `git+` prefixed value'
    required: False
  ape-plugins-list:
    description: 'Space seperated list of plugins to install with relevant pinning applied'
    required: False
    default: ''

outputs:
  ape-version:
    description: 'The version of Ape installed'

runs:
  using: 'composite'

  steps:
    - uses: actions/cache@v4
      name: Compilers cache
      with:
        path: |
          $HOME/.solcx
          $HOME/.vvm/vyper-*
        key: ${{ runner.os }}-compiler-cache

    - uses: actions/cache@v4
      name: Build cache
      with:
        path: ${{ github.workspace }}/.build
        key: ${{ runner.os }}-build-cache

    - uses: actions/cache@v4
      name: Ape data cache
      with:
        path: $HOME/.ape
        key: ${{ runner.os }}-apedata-cache

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set pip cache directory path
      id: pip-cache-dir-path
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Determine ape version to use
      id: determine-version
      run: |
        input_version="${{ inputs.ape-version-pin }}"
    
        if [[ "$input_version" != "" && "$input_version" != "''" ]]; then

          # Extract base path (before '[') for local path detection
          base_path="${input_version%%[*}"

          if [[ -d "$base_path" ]]; then
            # Using a local directory â€“ generate hash of its contents for cache key
            echo "INFO: Using local path: $input_version"
    
            # Change into the directory to hash relative paths deterministically
            pushd "$input_version" >/dev/null
        
            HASH=$(find "$input_version" -type f -exec shasum -a 256 {} + | shasum -a 256 | cut -c1-16)

            popd >/dev/null
    
            echo "ape-version=$input_version" >> "$GITHUB_OUTPUT"
            echo "ape-cache-key=local-${HASH}" >> "$GITHUB_OUTPUT"
            echo "Using local repo with hash: $HASH"
    
          else
            echo "ape-version=$input_version" >> "$GITHUB_OUTPUT"
            echo "ape-cache-key=$input_version" >> "$GITHUB_OUTPUT"
          fi
    
        else
          latest_version=$(curl -s https://pypi.org/pypi/eth-ape/json | jq -r '.info.version')
          echo "ape-version=$latest_version" >> "$GITHUB_OUTPUT"
          echo "ape-cache-key=$latest_version" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - name: Restore pip cache
      uses: actions/cache@v4
      id: pip-cache
      with:
        path: |
          ${{ steps.pip-cache-dir-path.outputs.dir }}
        key: ${{ inputs.python-version }}-pip-${{ steps.determine-version.outputs.ape-cache-key }}

    - name: Install Ape
      run: |
        pip install --upgrade pip

        ape_version="${{ steps.determine-version.outputs.ape-version }}"

        if [[ "$ape_version" == git+* ]]; then
          echo "INFO: Installing from a remote git version."
          pip install "$ape_version"

        else
          # Extract base path for local directory detection
          base_path="${ape_version%%[*}"

          if [[ -d "$base_path" ]]; then
            echo "INFO: Installing from local path: $ape_version"
            pip install "$ape_version"

          else
            version_regex='^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$'

            if [[ "$ape_version" =~ $version_regex ]]; then
              echo "INFO: Installing eth-ape==$ape_version"
              pip install "eth-ape==$ape_version"
            else
              echo "INFO: Installing eth-ape$ape_version"
              pip install "eth-ape$ape_version"
            fi
          fi
        fi
      shell: bash

    - name: Check ape-config.yaml exists
      id: check-ape-config-yaml
      uses: andstor/file-existence-action@v3
      with:
        files: 'ape-config.yaml'

    - name: Check pyproject.toml exists
      id: check-pyproject-toml
      uses: andstor/file-existence-action@v3
      with:
        files: 'pyproject.toml'

    - name: Check version specs in config
      id: check-plugin-version-specs
      run: |
        if [[ "${{ steps.check-ape-config-yaml.outputs.files_exists }}" == "true" ]]; then
          version_present=$(sed -n '/^plugins:/,/^[^ ]/{/version:/p;}' "ape-config.yaml" | grep -c version || true)
        elif [[ "${{ steps.check-pyproject-toml.outputs.files_exists }}" == "true" ]]; then
          version_present=$(python -c "from pathlib import Path; import tomllib; config = tomllib.loads(Path('pyproject.toml').read_text()); print('true' if any('version' in plugin for plugin in config.get('tool', {}).get('ape', {}).get('plugins', [])) else '')")
        else
          version_present=""
        fi
        if [[ -z "${version_present}" ]]; then
          echo "version_present=0" >> $GITHUB_OUTPUT
        else
          echo "version_present=1" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Install Plugins
      run: |
        if [[ "${{ steps.check-plugin-version-specs.outputs.version_present }}" == "1" ]] && [[ -z "${{ inputs.ape-plugins-list }}" ]]; then
          plugins_value="."
        elif [[ -z "${{ inputs.ape-plugins-list }}" ]]; then
          plugins_value="--upgrade ."
        else
          plugins_value="${{ inputs.ape-plugins-list }}"
        fi

        ape plugins install --verbosity DEBUG $plugins_value

      shell: bash
    - name: Check requirments.txt exists
      id: check-requirements-txt
      uses: andstor/file-existence-action@v3
      with:
        files: 'requirements.txt'

    - name: Install extra packages
      shell: bash
      run: |
        if [[ "${{ steps.check-requirements-txt.outputs.files_exists }}" == "true" ]]; then
          pip install -r requirements.txt
        elif [[ "${{ steps.check-pyproject-toml.outputs.files_exists }}" == "true" ]]; then
          pip install .
        fi

    - name: Ensure cache directories exist
      shell: bash
      run: |
        # NOTE: Workaround for an unrepressible warning
        # in the cache action:
        # https://github.com/actions/cache/issues/1241

        # NOTE: If HOME does not exist, mkdir fails.
        if [ -d "$HOME" ]; then
          if [ ! -d "$HOME/.solcx" ]; then
            mkdir "$HOME/.solcx"
            echo "Solcx directory created."
          fi
          if [ ! -d "$HOME/.vvm" ]; then
            mkdir "$HOME/.vvm"
            echo "VVM directory created."
          fi
          if [ ! -d "$HOME/.build" ]; then
            mkdir "$HOME/.build"
            echo ".build directory created."
          fi
        fi
